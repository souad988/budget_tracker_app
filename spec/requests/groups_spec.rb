require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/groups', type: :request do
  include Devise::Test::IntegrationHelpers
  before(:each) do
    allow(Devise.mailer).to receive(:confirmation_instructions).and_return(
      double('Mailer', deliver: true)
    )
    @user = User.create(name: 'test', email: 'test@gmail.com', password: 'test123')
    puts @user.errors.full_messages unless @user.persisted?
    @user.confirm # Confirm the user's email
    sign_in @user
  end

  let(:valid_attributes) do
    { name: 'food', icon: 'https://food.png' }
  end

  let(:invalid_attributes) do
    { name: '', icon: '', author: @user }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Group.create(name: 'food', icon: 'https://food.png', author: @user)
      get groups_url
      expect(response).to be_successful
    end
  end

  describe 'GET /group' do
    it 'renders a successful response' do
      Group.create(name: 'food', icon: 'https://food.png', author: @user)
      get group_url(Group.last)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_group_url
      expect(response).to be_successful
    end
  end

  describe 'GET /create' do
    it 'renders a successful response' do
      post groups_url, params: { group: valid_attributes }
      expect(response).to redirect_to(group_url(Group.last))
    end
  end
end
